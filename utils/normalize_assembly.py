import os
import re
import json
from tqdm import tqdm

class NormalizeAssembly:
    def __init__(self, input_dir, output_dir):
        self.input_dir = input_dir
        self.output_dir = output_dir

    def normalize(self, inst):
        # Remove comments
        inst = re.sub(r';.*', '', inst)
        # Replace numeric constant values with "N"
        inst = re.sub(r'\b0x[0-9a-fA-F]+\b|\b\d+\b', 'N', inst)
        # Replace function names with their short name
        inst = re.sub(r'\b(sym|fcn|sub|loc|str|reloc|obj)_[0-9a-fA-F]+\b', r'\1', inst)
        # Replace remaining function addresses with "fcn"
        inst = re.sub(r'\bfcn\.[0-9a-fA-F]+\b', 'fcn', inst)
        
        inst = inst.replace(',', ' ')
        
        parts = re.split(r'(\s+|[\[\]+*])', inst)
        asm_normed = []
        for part in parts:
            if re.match(r'\b[^a-zA-Z0-9]+\b', part):
                part = 'M'
            elif part.strip():
                asm_normed.append(part.strip())
        
        normalized_inst = '-'.join(filter(None, asm_normed))
        
        # Additional cleaning
        normalized_inst = re.sub(r'-(\s*-)+', '-', normalized_inst)
        normalized_inst = re.sub(r'\[-|-\]', '', normalized_inst)
        normalized_inst = re.sub(r'-(,)-', '-', normalized_inst)
        normalized_inst = re.sub(r'-+', '-', normalized_inst)
        normalized_inst = re.sub(r'-$', '', normalized_inst)
        normalized_inst = re.sub(r'^-', '', normalized_inst)
        
        return normalized_inst

    def process_json_files(self):
        for category in ['benign', 'malware']:
            category_path = os.path.join(self.input_dir, category)
            if not os.path.exists(category_path):
                print(f"Warning: {category_path} does not exist. Skipping.")
                continue
            for root, _, files in os.walk(category_path):
                for file in tqdm(files, desc=f"Processing {category} files"):
                    if file.endswith('.json'):
                        input_path = os.path.join(root, file)
                        relative_path = os.path.relpath(input_path, self.input_dir)
                        output_path = os.path.join(self.output_dir, relative_path)
                        os.makedirs(os.path.dirname(output_path), exist_ok=True)
                        
                        with open(input_path, 'r') as f:
                            data = json.load(f)
                        
                        normalized_data = self.normalize_data(data)
                        
                        with open(output_path, 'w') as f:
                            json.dump(normalized_data, f, indent=2)

    def normalize_data(self, data):
        if isinstance(data, dict):
            return {k: self.normalize_data(v) for k, v in data.items()}
        elif isinstance(data, list):
            return [self.normalize_data(item) for item in data]
        elif isinstance(data, str):
            return self.normalize(data)
        else:
            return data