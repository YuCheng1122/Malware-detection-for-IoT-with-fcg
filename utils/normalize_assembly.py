import os
import re
import json
from tqdm import tqdm
from typing import List, Dict, Any
from utils.tools import process_json_files

class NormalizeAssembly:
    
    def __init__(self, config, logger):
        self.config = config
        self.logger = logger
        self.input_dir = config.path.DEFAULT_INPUT_PATH
        self.output_dir = config.path.NORMALIZED_OUT_PATH
        self.predict_input_dir = config.folder.PREDICT_DIR
        self.predict_output_dir = config.folder.PREDICT_NORMALIZED_DIR

    def normalize(self, inst):
        """Normalize the assembly instruction"""
        try:
            # Remove comments
            inst = re.sub(r';.*', '', inst)
            # Replace numeric constant values with "N"
            inst = re.sub(r'\b0x[0-9a-fA-F]+\b|\b\d+\b', 'N', inst)
            # Replace function names with their short name
            inst = re.sub(r'\b(sym|fcn|sub|loc|str|reloc|obj)_[0-9a-fA-F]+\b', r'\1', inst)
            # Replace remaining function addresses with "fcn"
            inst = re.sub(r'\bfcn\.[0-9a-fA-F]+\b', 'fcn', inst)
            
            inst = inst.replace(',', ' ')
            
            parts = re.split(r'(\s+|[\[\]+*])', inst)
            asm_normed = []
            for part in parts:
                if re.match(r'\b[^a-zA-Z0-9]+\b', part):
                    part = 'M'
                elif part.strip():
                    asm_normed.append(part.strip())
            
            normalized_inst = '-'.join(filter(None, asm_normed))
            
            # Additional cleaning
            normalized_inst = re.sub(r'-(\s*-)+', '-', normalized_inst)
            normalized_inst = re.sub(r'\[-|-\]', '', normalized_inst)
            normalized_inst = re.sub(r'-(,)-', '-', normalized_inst)
            normalized_inst = re.sub(r'-+', '-', normalized_inst)
            normalized_inst = re.sub(r'-$', '', normalized_inst)
            normalized_inst = re.sub(r'^-', '', normalized_inst)
            
            return normalized_inst
        except Exception as e:
            self.logger.error(f"Error normalizing instruction: {inst}")
            self.logger.exception(e)
            return inst

    def normalize_data(self, data: Any) -> Any:
        """Normalize the data"""
        if isinstance(data, dict):
            return {k: self.normalize_data(v) for k, v in data.items()}
        elif isinstance(data, list):
            return [self.normalize_data(item) for item in data]
        elif isinstance(data, str):
            return self.normalize(data)
        else:
            return data

    def process_json_files(self, is_prediction=False):
        """Process the JSON files"""
        input_dir = self.predict_input_dir if is_prediction else self.input_dir
        output_dir = self.predict_output_dir if is_prediction else self.output_dir
        
        data_type = "prediction" if is_prediction else "training"
        self.logger.info(f"Starting JSON file processing for {data_type} data assembly normalization")
        process_json_files(input_dir, output_dir, self.normalize_data)
        self.logger.info(f"JSON file processing for {data_type} data assembly normalization completed")

    def normalize_training_data(self):
        """Normalize the training data"""
        self.process_json_files(is_prediction=False)

    def normalize_prediction_data(self):
        """Normalize the prediction data"""
        self.process_json_files(is_prediction=True)

def normalize_assembly(config, logger, is_prediction=False):
    """Normalize the assembly"""
    normalizer = NormalizeAssembly(config, logger)
    if is_prediction:
        normalizer.normalize_prediction_data()
    else:
        normalizer.normalize_training_data()