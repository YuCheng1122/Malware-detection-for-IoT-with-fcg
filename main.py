from gcn_detector import SubDetector
import logging
import os
import json
from types import SimpleNamespace

DEFAULT_CONFIG_PATH = "./config.json"

def dict_to_namespace(d):
    if isinstance(d, dict):
        return SimpleNamespace(**{k: dict_to_namespace(v) for k, v in d.items()})
    elif isinstance(d, list):
        return [dict_to_namespace(v) for v in d]
    else:
        return d

def load_config(config_file_path=DEFAULT_CONFIG_PATH):
    with open(config_file_path, 'r') as f:
        config_dict = json.load(f)
    return dict_to_namespace(config_dict)

def setup_logging(config):
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Determine the base log directory
    if hasattr(config.path, 'LOGS_PATH'):
        base_log_dir = config.path.LOGS_PATH
    else:
        base_log_dir = './logs'  # Default fallback

    # Create specific log directories
    log_dirs = {
        'gcn': os.path.join(base_log_dir, 'gcn_logs'),
        'word2vec': os.path.join(base_log_dir, 'word2vec_logs'),
        'graph_processing': os.path.join(base_log_dir, 'graph_processing_logs'),
        'assembly_normalization': os.path.join(base_log_dir, 'assembly_normalization_logs')
    }

    # Ensure all log directories exist
    for dir_path in log_dirs.values():
        os.makedirs(dir_path, exist_ok=True)

    # Create a console handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    # Create separate loggers for each process
    loggers = {}
    for log_type, log_dir in log_dirs.items():
        logger = logging.getLogger(log_type)
        logger.setLevel(logging.INFO)
        
        # Add console handler
        logger.addHandler(console_handler)
        
        # Add file handler
        log_file = os.path.join(log_dir, f'{log_type}_training.log')
        file_handler = logging.FileHandler(log_file)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        loggers[log_type] = logger

    return loggers

if __name__ == "__main__":
    
    # Load the configuration
    config = load_config()

    # Setup logging
    loggers = setup_logging(config)
    
    detector = SubDetector(config=config, loggers=loggers)

    # Test normalize function
    # loggers['assembly_normalization'].info("Starting assembly normalization...")
    # detector.normalize_assembly_files()
    # loggers['assembly_normalization'].info("Assembly normalization completed.")
    
    # loggers['assembly_normalization'].info("Starting assembly normalization...")
    # detector.normalize_prediction_files()
    # loggers['assembly_normalization'].info("Assembly normalization completed.")

    # Test word2vec function
    # loggers['word2vec'].info("Starting Word2Vec training...")
    # detector.train_word2vec()
    # loggers['word2vec'].info("Word2Vec training completed.")
    
    # loggers['graph_processing'].info("Starting graph processing...")
    # detector.process_graphs()
    # loggers['graph_processing'].info("Graph processing completed.")
    
    # loggers['gcn'].info("Starting GCN training...")
    # detector.train_gcn()
    # loggers['gcn'].info("GCN training completed.")
    
    loggers['gcn'].info("Starting prediction...")
    detector.predict()
    loggers['gcn'].info("Prediction completed.")
    
    loggers['gcn'].info("SubDetector process completed")