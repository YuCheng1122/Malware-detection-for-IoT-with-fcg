import torch
import torch.nn.functional as F
from torch.nn import Linear, BatchNorm1d
from torch_geometric.nn import SAGEConv, global_mean_pool

class GCNWithAttention(torch.nn.Module):
    def __init__(self, num_features, hidden_channels, num_classes, num_layers, dropout_rate=0.5):
        super(GCNWithAttention, self).__init__()
        self.convs = torch.nn.ModuleList()
        self.batch_norms = torch.nn.ModuleList()
        self.convs.append(SAGEConv(num_features, hidden_channels))
        self.batch_norms.append(BatchNorm1d(hidden_channels))
        for _ in range(num_layers - 2):
            self.convs.append(SAGEConv(hidden_channels, hidden_channels))
            self.batch_norms.append(BatchNorm1d(hidden_channels))
        self.convs.append(SAGEConv(hidden_channels, num_classes))
        self.attention = Linear(num_classes, 1)
        self.dropout_rate = dropout_rate

    def forward(self, x, edge_index, batch):
        for conv, bn in zip(self.convs[:-1], self.batch_norms):
            x = conv(x, edge_index)
            x = bn(x)
            x = F.relu(x)
            x = F.dropout(x, p=self.dropout_rate, training=self.training)
        x = self.convs[-1](x, edge_index)
        
        attention_weights = F.softmax(self.attention(x), dim=0)
        x = x * attention_weights
        x = global_mean_pool(x, batch)
        
        return F.log_softmax(x, dim=1)